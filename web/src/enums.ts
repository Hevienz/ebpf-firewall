export enum EthernetType {
	LLC = 0x0000,
	IPv4 = 0x0800,
	ARP = 0x0806,
	RARP = 0x8035,
	IPv6 = 0x86dd,
	CiscoDiscovery = 0x2000,
	NortelDiscovery = 0x01a2,
	TransparentEthernetBridging = 0x6558,
	Dot1Q = 0x8100,
	PPP = 0x880b,
	PPPoEDiscovery = 0x8863,
	PPPoESession = 0x8864,
	MPLSUnicast = 0x8847,
	MPLSMulticast = 0x8848,
	EAPOL = 0x888e,
	ERSPAN = 0x88be,
	QinQ = 0x88a8,
	LinkLayerDiscovery = 0x88cc,
	EthernetCTP = 0x9000,
	BPQ = 0x08ff,
	IEEEPUP = 0x0a00,
	IEEEPUPAT = 0x0a01,
	DEC = 0x6000,
	DNADL = 0x6001,
	DNARC = 0x6002,
	DNART = 0x6003,
	LAT = 0x6004,
	DIAG = 0x6005,
	CUST = 0x6006,
	SCA = 0x6007,
	ATALK = 0x809b,
	AARP = 0x80f3,
	IPX = 0x8137,
	PAUSE = 0x8808,
	SLOW = 0x8809,
	WCCP = 0x883e,
	ATMMPO = 0x884c,
	ATMFATE = 0x8884,
	AOE = 0x88a2,
	TIPC = 0x88ca,
	IEEE1588 = 0x88f7,
	FCOE = 0x8906,
	FIP = 0x8914,
	EDSA = 0xdada
}

// 字符串映射对象
export const EthernetTypeString: Record<EthernetType, string> = {
	[EthernetType.LLC]: 'LLC',
	[EthernetType.IPv4]: 'IPv4',
	[EthernetType.ARP]: 'ARP',
	[EthernetType.RARP]: 'RARP',
	[EthernetType.IPv6]: 'IPv6',
	[EthernetType.CiscoDiscovery]: 'Cisco Discovery',
	[EthernetType.NortelDiscovery]: 'Nortel Discovery',
	[EthernetType.TransparentEthernetBridging]: 'Transparent Ethernet Bridging',
	[EthernetType.Dot1Q]: '802.1Q',
	[EthernetType.PPP]: 'PPP',
	[EthernetType.PPPoEDiscovery]: 'PPPoE Discovery',
	[EthernetType.PPPoESession]: 'PPPoE Session',
	[EthernetType.MPLSUnicast]: 'MPLS Unicast',
	[EthernetType.MPLSMulticast]: 'MPLS Multicast',
	[EthernetType.EAPOL]: 'EAPOL',
	[EthernetType.ERSPAN]: 'ERSPAN',
	[EthernetType.QinQ]: 'QinQ',
	[EthernetType.LinkLayerDiscovery]: 'Link Layer Discovery',
	[EthernetType.EthernetCTP]: 'Ethernet CTP',
	[EthernetType.BPQ]: 'BPQ',
	[EthernetType.IEEEPUP]: 'IEEE PUP',
	[EthernetType.IEEEPUPAT]: 'IEEE PUPAT',
	[EthernetType.DEC]: 'DEC',
	[EthernetType.DNADL]: 'DNA DL',
	[EthernetType.DNARC]: 'DNA RC',
	[EthernetType.DNART]: 'DNA RT',
	[EthernetType.LAT]: 'LAT',
	[EthernetType.DIAG]: 'DIAG',
	[EthernetType.CUST]: 'CUST',
	[EthernetType.SCA]: 'SCA',
	[EthernetType.ATALK]: 'AppleTalk',
	[EthernetType.AARP]: 'AARP',
	[EthernetType.IPX]: 'IPX',
	[EthernetType.PAUSE]: 'PAUSE',
	[EthernetType.SLOW]: 'SLOW',
	[EthernetType.WCCP]: 'WCCP',
	[EthernetType.ATMMPO]: 'ATM MPOA',
	[EthernetType.ATMFATE]: 'ATM FATE',
	[EthernetType.AOE]: 'AoE',
	[EthernetType.TIPC]: 'TIPC',
	[EthernetType.IEEE1588]: 'IEEE 1588',
	[EthernetType.FCOE]: 'FCoE',
	[EthernetType.FIP]: 'FIP',
	[EthernetType.EDSA]: 'EDSA'
}

export enum IPProtocol {
	IP = 0,
	ICMPv4 = 1,
	IGMP = 2,
	IPv4 = 4,
	TCP = 6,
	UDP = 17,
	RUDP = 27,
	IPv6 = 41,
	IPv6Routing = 43,
	IPv6Fragment = 44,
	GRE = 47,
	ESP = 50,
	AH = 51,
	ICMPv6 = 58,
	NoNextHeader = 59,
	IPv6Destination = 60,
	OSPF = 89,
	IPIP = 94,
	EtherIP = 97,
	VRRP = 112,
	SCTP = 132,
	UDPLite = 136,
	MPLSInIP = 137
}

// 协议号到字符串的映射
export const IPProtocolString: Record<IPProtocol, string> = {
	[IPProtocol.IP]: 'IP',
	[IPProtocol.ICMPv4]: 'ICMPv4',
	[IPProtocol.IGMP]: 'IGMP',
	[IPProtocol.IPv4]: 'IPv4',
	[IPProtocol.TCP]: 'TCP',
	[IPProtocol.UDP]: 'UDP',
	[IPProtocol.RUDP]: 'RUDP',
	[IPProtocol.IPv6]: 'IPv6',
	[IPProtocol.IPv6Routing]: 'IPv6 Routing',
	[IPProtocol.IPv6Fragment]: 'IPv6 Fragment',
	[IPProtocol.GRE]: 'GRE',
	[IPProtocol.ESP]: 'ESP',
	[IPProtocol.AH]: 'AH',
	[IPProtocol.ICMPv6]: 'ICMPv6',
	[IPProtocol.NoNextHeader]: 'No Next Header',
	[IPProtocol.IPv6Destination]: 'IPv6 Destination',
	[IPProtocol.OSPF]: 'OSPF',
	[IPProtocol.IPIP]: 'IPIP',
	[IPProtocol.EtherIP]: 'EtherIP',
	[IPProtocol.VRRP]: 'VRRP',
	[IPProtocol.SCTP]: 'SCTP',
	[IPProtocol.UDPLite]: 'UDPLite',
	[IPProtocol.MPLSInIP]: 'MPLS-in-IP'
}

// 字符串到协议号的映射
export const IPProtocolMap: Record<string, IPProtocol> = {
	icmp: IPProtocol.ICMPv4,
	icmpv4: IPProtocol.ICMPv4,
	igmp: IPProtocol.IGMP,
	udp: IPProtocol.UDP,
	tcp: IPProtocol.TCP,
	rudp: IPProtocol.RUDP,
	ip: IPProtocol.IPv4,
	ipv4: IPProtocol.IPv4,
	ipv6: IPProtocol.IPv6,
	icmpv6: IPProtocol.ICMPv6,
	'ipv6 routing': IPProtocol.IPv6Routing,
	'ipv6 fragment': IPProtocol.IPv6Fragment,
	gre: IPProtocol.GRE,
	esp: IPProtocol.ESP,
	ah: IPProtocol.AH,
	ospf: IPProtocol.OSPF,
	ipip: IPProtocol.IPIP,
	etherip: IPProtocol.EtherIP,
	vrrp: IPProtocol.VRRP,
	sctp: IPProtocol.SCTP,
	udplite: IPProtocol.UDPLite,
	'mpls-in-ip': IPProtocol.MPLSInIP,
	'no next header': IPProtocol.NoNextHeader,
	'ipv6 destination': IPProtocol.IPv6Destination
}

// 获取字符串描述的辅助函数
export function getEthernetTypeString(type: EthernetType): string {
	return EthernetTypeString[type] || `0x${type.toString(16).padStart(4, '0')}`
}

// 获取协议的字符串描述
export function getIPProtocolString(protocol: IPProtocol): string {
	return IPProtocolString[protocol] || `0x${protocol.toString(16).padStart(2, '0')}`
}
